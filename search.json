[{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"simdata: A package for creating simulated datasets","text":"Simulation studies statistics methodological research fields controlled experiments used assess properties algorithms, gauge performance statistical machine learning models, gain insights complex phenomena readily understood analytically. simulation studies nature simplifying “true” underlying mechanisms interest, useful allow complete specification “ground truth” comparisons can made experimental conditions fully control experimenter. contrast data obtained observational studies, many factors may influence resulting measurements. Simulation studies typically consist three major components: data generating mechanism methods models evaluated Evaluation criteria assess methods application generated data three together make call simulation study design. data generating mechanism usually simulates (.e. creates) data according pre-defined parameters, e.g. number variables (.e. columns data matrix) generated, correlation structure number observations (.e. rows data matrix). Usually, data generation involves uncertainty noise creating data, mimic uncertainty data obtained measurements real world sampled population. Therefore, simulation scenario can conducted repeatedly remove effect sampling variability. methods models evaluated study applied datasets generated data generating mechanism evaluation criteria computed, e.g. measure deviation ground truth.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"data-generation-with-this-package","dir":"Articles","previous_headings":"Introduction","what":"Data generation with this package","title":"simdata: A package for creating simulated datasets","text":"goal simdata package provide simple yet flexible framework supports first step simulation study, namely data generating mechanism. way data created package involves following procedure: Draw initial dataset Z probability distribution. example might draw number variables given correlation structure multivariate Normal distribution. initial data transformed via user specified transformation functions final dataset X. Examples transformations derive binary variables Normal random variables change location scale initial random variables. final dataset optionally post-processed. Examples truncate dataset prevent problematic outliers standardize data. steps, final dataset X can used steps simulation study.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"workflow-with-this-package","dir":"Articles","previous_headings":"Introduction","what":"Workflow with this package","title":"simdata: A package for creating simulated datasets","text":"order implement outlined data generating mechanism, user first define simulation design. done extending S3 class simdesign, using one pre-defined simulation designs, used interface package functions. stores necessary information generate data following given specification. actual data generation happens simulate_data function. Please see numerous examples quickly familiarize package functionality.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"packages-used","dir":"Articles","previous_headings":"Introduction","what":"Packages used","title":"simdata: A package for creating simulated datasets","text":"vignette makes use tidyverse environment packages specifically requires dplyr, purrr, ggplot2, forcats GGally packages available, well reshape2 package data transformation. Furthermore, parallelization example doParallel doRNG package loaded. Please refer R environment used create vignette detailed information. vignette prefix relevant function calls :: show package implements function - necessary done demonstration purposes.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"example-1-independent-data-no-transformation","dir":"Articles","previous_headings":"","what":"Example 1: Independent data, no transformation","title":"simdata: A package for creating simulated datasets","text":"demonstrate basic example : Define diagonal 5 x 5 correlation matrix (correlation_matrix) Ensure data returned data.frame passing data.frame constructor transform_initial. (Otherwise data returned matrix.) Pass prefix function construct variable names Simulate design obtain 100 observations (n_obs) given random seed (seed). Inspect simulated data.","code":"correlation_matrix = diag(1, nrow = 5)  sim_design = simdata::simdesign_mvtnorm(relations = correlation_matrix,                                          transform_initial = data.frame,                                         prefix_final = \"variable\") sim_data = simdata::simulate_data(sim_design, n_obs = 100, seed = 25897165)  knitr::kable(head(sim_data)) p = GGally::ggpairs(sim_data,                      upper = list(continuous = \"points\"),                      progress = FALSE) +   theme_bw() print(p)"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"ex2","dir":"Articles","previous_headings":"","what":"Example 2: Independent data, with transformation","title":"simdata: A package for creating simulated datasets","text":"example transform initial data obtain interesting dataset. basic principle follows Example 1. Pass functions transform columns simulated, initial dataset named arguments number columns final dataset given number transformations passed let names arguments determine final columnnames, set prefix_final NULL simdesign constructor Pass created transformation function transform_initial argument simdesign constructor.","code":"correlation_matrix = diag(1, nrow = 5) transformation = simdata::function_list(   \"v1\" = function(x) x[, 1],   \"v2*2\" = function(x) x[, 2] * 2,    \"v3^2\" = function(x) x[, 3]^2,   \"v4+v5\" = function(x) x[, 4] + x[, 5],    check.names = FALSE # pass columnnames exactly as specified here )  sim_design = simdata::simdesign_mvtnorm(   relations = correlation_matrix,   transform_initial = transformation,    prefix_final = NULL ) sim_data = simdata::simulate_data(sim_design, n_obs = 100, seed = 25897165)  knitr::kable(head(sim_data)) p = GGally::ggpairs(sim_data, upper = list(continuous = \"points\"),                      progress = FALSE) +   theme_bw() print(p)"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"ex3","dir":"Articles","previous_headings":"","what":"Example 3: Realistic, complex data","title":"simdata: A package for creating simulated datasets","text":"example implement design following Binder, Sauerbrei, Royston (2011). simulated data resembles data obtained biomedical study complex correlation pattern different variable distributions. defines initial distribution multivariate Normal distribution Z 15 dimensions Using transformation initial distribution Z transformed final dataset X 17 columns","code":"correlation_matrix = simdata::cor_from_upper(   15,    rbind(c(1,2,0.8), c(1,9,0.3),          c(3,5,0.3), c(3,9,-0.5),          c(4,6,-0.5), c(4,7,-0.3),         c(5,6,-0.3), c(5,12,0.5),         c(6,7,0.5), c(6,11,0.5), c(6,14,0.3),         c(7,11,0.3), c(7,14,0.3),         c(8,9,-0.3), c(8,11,0.3),         c(11,14,0.5)))  transformation = simdata::function_list(   v1 = function(z) floor(10 * z[,1] + 55),    v2 = function(z) z[,2] < 0.6,    v3 = function(z) exp(0.4 * z[,3] + 3),   v4 = function(z) z[,4] >= -1.2,   v5 = function(z) z[,4] >= 0.75,   v6 = function(z) exp(0.5 * z[,5] + 1.5),   v7 = function(z) floor(pmax(0, 100 * exp(z[,6]) - 20)),   v8 = function(z) floor(pmax(0, 80 * exp(z[,7]) - 20)),   v9 = function(z) z[,8] < -0.35,   v10 = function(z) (z[,9] >= 0.5) & (z[,9] < 1.5),   v11 = function(z) z[,9] >= 1.5,   v12 = function(z) 0.01*floor(100 * (z[,10] + 4)^2),   v13 = function(z) floor(10 * z[,11] + 55),   v14 = function(z) floor(10 * z[,12] + 55),   v15 = function(z) floor(10 * z[,13] + 55),   v16 = function(z) z[,14] < 0,   v17 = function(z) z[,15] < 0 )  sim_design = simdata::simdesign_mvtnorm(   relations = correlation_matrix,   transform_initial = transformation,   prefix_final = NULL )"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"visualisation-of-initial-correlation-matrix","dir":"Articles","previous_headings":"Example 3: Realistic, complex data","what":"Visualisation of initial correlation matrix","title":"simdata: A package for creating simulated datasets","text":"can display correlation matrix initial underlying distribution using ggplot2. can use graph plotting tools package display basic correlation network.  can use simple graph visualisation provided package. keep graph simple, correlations certain threshold removed. simdata::plot_cor_network function provides several options improve display graph, explained detail . just point layout network based Fruchterman-Reingold algorithm implemented igraph package therefore comprises random parts. Therefore, using seed random number generation advised.","code":"simdata::plot_cor_network(sim_design, seed = 1)"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"simfinal","dir":"Articles","previous_headings":"Example 3: Realistic, complex data","what":"Simulation and visualisation of final data","title":"simdata: A package for creating simulated datasets","text":"simulate design visualise numeric variables via violinplots discrete variables via barplots using ggplot2.  can also plot correlation structure single, final dataset via correlation matrix visualise using ggplot2 network using functions provided package.","code":"sim_data = simdata::simulate_data(sim_design, n_obs = 100, seed = 25897165)"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"plotestcor","dir":"Articles","previous_headings":"Example 3: Realistic, complex data","what":"Visualisation of estimated correlation network","title":"simdata: A package for creating simulated datasets","text":"Note correlation matrix based single simulated dataset fixed size. provide robust stable estimate correlation transforming initial dataset, one can employ approximation simulation, initial correlation structure affected data transformation can analytically expressed cases. can conveniently achieved using estimate_final_correlation. resulting correlation network can visualized via plot_cor_network plot_estimated_cor_network combines estimation correlation matrix network plotting one wrapper function. Note layout algorithm igraph computes similar layout initial final correlation structure, given manual tweaking random seed. probably hold setups, initial final layout somewhat similar (.e. proper pruning via cutting low correlations), resulting graphs may reflect . demonstrate basic plotting functionality (arguments identical plot_cor_network): Draw edges graph setting cor_cutoff NULL Turn edge labeling setting edge_label_function NULL Controling edge width using edge_width_function Using edge weights (.e. correlation two variables) influence graph layout via use_edge_weights - higher edge weight brings vertices closer together  following graphs use default correlation cutoff 0.1. Note edge weights used, networks different correlation types can compared directly, vertex layout may change Note usage mar set image margins make axes visisble Note distinction categorical numeric data turned (show_categorical)    plots evident dataset contains tight cluster highly correlated variables (especially v4, v5, v7, v8, v13, v16) also quite independent variables (v12, v15, v17). also connected network via one variable (v2, v14). Thanks network layout plot, often intelligible plain correlation matrix, quite clearly shows rich variety correlation patterns within simulated data.","code":"# draw full network simdata::plot_estimated_cor_network(sim_design,                                      cor_cutoff = NULL,                                      edge_label_function = NULL,                                     edge_width_function = function(x) x*25,                                     use_edge_weights = TRUE,                                      edge.color = \"clipped-ramp\",                                     seed = 2321673) # simplify by using cor_cutoff simdata::plot_estimated_cor_network(sim_design,                                      seed = 2) # set correlation type simdata::plot_estimated_cor_network(sim_design,                                      cor_type = \"spearman\",                                      seed = 2321673) # set various parameters simdata::plot_estimated_cor_network(sim_design, seed = 2321673,                                      edge.color = \"red-blue\",                                      axes = TRUE, cor_type = \"s\",                                      edge_width_function = function(x) var(x)*200,                                     show_categorical = FALSE,                                      mar = c(2, 2, 0, 0))"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"post-processing","dir":"Articles","previous_headings":"Example 3: Realistic, complex data","what":"Post-processing","title":"simdata: A package for creating simulated datasets","text":"Post-processing can used apply number functions dataset returned simulate_data. useful e.g.  standardize truncate data, shown . add post-processing functions simdesign object, simply pass list constructor add directly object. entry name (name function) list named arguments passed function (default parameters used simply pass empty list). See do_processing help details. simulation data need changed way.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"truncation","dir":"Articles","previous_headings":"Example 3: Realistic, complex data > Post-processing","what":"Truncation","title":"simdata: A package for creating simulated datasets","text":"Truncation added specific numeric variables passing named vector Compare results results note truncation specified variables (v6, v7, v8).  Note truncation based statistics derived individual simulated dataset. implement truncation based statistics derived data generating mechanism , one can 1) simulate reasonably large, untruncated dataset, 2) derive desired upper lower truncation thresholds, 3) add process_truncate_by_threshold derived truncation thresholds simulator object truncate fixed tresholds every simulation run. Truncation can done independently lower upper thresholds (see example ). Compare results results note truncation specified variables (v6, v7, v8).","code":"sim_design$process_final = list(     process_truncate_by_iqr = list(         truncate_multipliers = c(v6 = 2, v7 = 2, v8 = 2)     ) )  sim_data = simdata::simulate_data(sim_design, n_obs = 100, seed = 25897165) sim_design$process_final = list(     process_truncate_by_threshold = list(         truncate_upper = c(v8 = 200, v7 = 300),         truncate_lower = c(v6 = 2)     ) )  sim_data = simdata::simulate_data(sim_design, n_obs = 100, seed = 25897165)"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"standardization","dir":"Articles","previous_headings":"Example 3: Realistic, complex data > Post-processing","what":"Standardization","title":"simdata: A package for creating simulated datasets","text":"Similarly, standardization can applied using standard scale function, changing scale y-axis following plots. Note order functions passed via process_final important. Since base::scale() returns matrix, also want transform result back data.frame end.","code":"sim_design$process_final = list(     process_truncate_by_iqr = list(         truncate_multipliers = c(v6 = 2, v7 = 2, v8 = 2)     ),      scale = list(),      data.frame = list() )  sim_data = simdata::simulate_data(sim_design, n_obs = 100, seed = 25897165)"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"advanced-simulation-setup","dir":"Articles","previous_headings":"","what":"Advanced simulation setup","title":"simdata: A package for creating simulated datasets","text":"following briefly present advanced usage aspects package.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"rejection-sampling","dir":"Articles","previous_headings":"Advanced simulation setup","what":"Rejection sampling","title":"simdata: A package for creating simulated datasets","text":"simple form rejection sampling implemented simulate_data_conditional function, accepts final dataset fulfills specified conditions. can useful prevent issues simulation runs simulated data e.g. likely produce collinear matrices due high dependencies variables produce low variance variables. Note approach can lead serious bias simulations rejection rate high. Thus, might necessary revise setup least record number rejections reporting purposes (facilitated return_tries option function). Usually rejections occur rarely. case simulate_data_conditional function can used let simulation run smoothly let calling function decide handle rejections. show example, set simple simulation two variables make collinear purpose via transformation. is_collinear function package used check collinearity three runs rejected datasets function returns (reject_max_iter) number tries returned list (return_tries) Note multiple conditions can checked passing function_list rejection function. must fulfilled matrix rejected. example randomly transform columns collinear constant. However, end obtain result passes checks.","code":"correlation_matrix = diag(1, nrow = 2) transformation = simdata::function_list(\"v1\" = function(x) x[, 1],                                         \"v1*2\" = function(x) x[, 1] * 2,                                          check.names = FALSE)  sim_design = simdata::simdesign_mvtnorm(   relations = correlation_matrix,           transform_initial = transformation,    prefix_final = NULL )  # ignoring the collinearity sim_data = simdata::simulate_data(sim_design, n_obs = 100, seed = 2) knitr::kable(cor(sim_data)) # rejecting collinear matrices sim_data = simdata::simulate_data_conditional(sim_design,                                               n_obs = 100, seed = 2,                                               reject = is_collinear,                                               reject_max_iter = 3,                                               return_tries = TRUE) ## Warning in reject(x): is_collinear: Matrix is not full rank.  ## Warning in reject(x): is_collinear: Matrix is not full rank.  ## Warning in reject(x): is_collinear: Matrix is not full rank. ## Warning in simdata::simulate_data_conditional(sim_design, n_obs = 100, seed = 2, : No suitable datamatrix found within iteration limit. Returning NULL. sim_data ## $x ## NULL ##  ## $n_tries ## [1] 3 correlation_matrix = diag(1, nrow = 3) transformation = simdata::function_list(   \"v1\" = function(x) x[, 1],   \"might_be_collinear\" = function(x) {     if (rbinom(1, 1, 0.5)) {       return(x[, 1] * 2)     } else return(x[, 2])   },    \"might_be_constant\" = function(x) {     if (rbinom(1, 1, 0.5)) {       return(0)     } else return(x[, 3])   },   check.names = FALSE)  sim_design = simdata::simdesign_mvtnorm(   relations = correlation_matrix,           transform_initial = transformation,   prefix_final = NULL )  sim_data = simdata::simulate_data_conditional(   sim_design,   n_obs = 100, seed = 3,   reject = simdata::function_list(is_collinear,                                    contains_constant),   reject_max_iter = 3,    return_tries = TRUE) ## Warning in f(x): is_collinear: Matrix is not full rank. ## Warning in f(x): contains_constant: Matrix contains constant column. ## Warning in f(x): is_collinear: Matrix is not full rank. sprintf(\"Number of tries: %d\", sim_data[[2]]) ## [1] \"Number of tries: 3\" knitr::kable(head(sim_data[[1]]))"},{"path":[]},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"other","dir":"Articles","previous_headings":"Advanced simulation setup > User defined simdesign classes","what":"Other initial distributions","title":"simdata: A package for creating simulated datasets","text":"package, simulating initial data multivariate Normal distribution already implemented simdesign_mvtnorm S3 class. However, easy implement distributions extend underlying interface simdesign class. , needs implemented generator object new simulation class. show code toy wrapper simulate binary data using stats::rbinom function. new class must implement generator function takes one argument (number observations simulate) outputs two-dimensional array (matrix data.frame) new class always use ... pass arguments simdesign new class extend class attribute facilitate writing S3 methods recognize newly implemented class Finally, can use newly created class examples .","code":"binomial_simdesign <- function(size = 1, prob = 0.5, ...) {      # define generator function   # make sure it returns a two-dimensional array   generator = function(n) matrix(rbinom(n, size = size, prob = prob), ncol = 1)      # setup simdesign object   # make sure to pass generator function and ...   # all other information passed is optional   dsgn = simdata::simdesign(     generator = generator,      size = size,      prob = prob,     ...   )      # extend the class attribute    class(dsgn) = c(\"binomial_simdesign\", class(dsgn))      # return the object   dsgn } sim_design = binomial_simdesign(size = 1, prob = 0.7) sim_data = simdata::simulate_data(sim_design, 100, seed = 1) knitr::kable(table(sim_data))"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"using-real-data","dir":"Articles","previous_headings":"Advanced simulation setup > User defined simdesign classes","what":"Using real data","title":"simdata: A package for creating simulated datasets","text":"package can also easily extended used wrapper resampling real datasets. Similar example , easily accomplished extending simdesign class shown . implement simple bootstrap procedure sampling randomly replacement dataset. Many resampling techniques created similarly. Note works dataset saved environment generator function therefore always accessible generator function. can retrieved via get(\"dataset\", envir = environment(sim_design$generator)). Finally, can use newly created class examples .","code":"realdata_simdesign <- function(dataset, ...) {      # define generator function   # make sure it returns a two-dimensional array   generator = function(n) dataset[sample(1:nrow(dataset), n, replace = TRUE), ,                                   drop = FALSE]      # setup simdesign object   # make sure to pass generator function and ...   # all other information passed is optional   dsgn = simdata::simdesign(     generator = generator,      dataset = dataset,     ...   )      # extend the class attribute    class(dsgn) = c(\"realdata_simdesign\", class(dsgn))      # return the object   dsgn } data(iris) sim_design = realdata_simdesign(iris, prefix_final = NULL) sim_data = simdata::simulate_data(sim_design, 100, seed = 1) knitr::kable(head(sim_data))"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"aspects-of-high-dimensional-setups","dir":"Articles","previous_headings":"Advanced simulation setup","what":"Aspects of high-dimensional setups","title":"simdata: A package for creating simulated datasets","text":"high-dimensional simulation studies number simulated variables large. briefly demonstrate simulate 100 variables multivariate Normal distribution block correlation matrix. shows use package functionality programmatically. Note 1000s variables drawing single multivariate Normal distribution using mvtnorm::rmvnorm highly inefficient replaced drawing individual blocks multivariate Normal distributions smaller dimension Note use base::substitute construct functions programmatically (substitute actually substitutes passed value instead symbol function definition) Note final transformation applied whole submatrix (possible long resulting outputs equal number rows) can visualise correlation matrix using ggplot2.  correlation network can often used clearly display large correlation structures. keep network simple, remove vertex edge labels adjust vertex edge sizes.  simulated data subsequently obtained applying specified transformations initial multivariate Normal data. visualised means density curves variable (brevity legend displayed variables indicated different colors).","code":"correlation_matrix = simdata::cor_from_upper(   100,   entries = rbind(     expand.grid(1:30, 1:30, 0.5),      expand.grid(31:50, 31:50, 0.2)) )  # create list of transformation functions programmatically # For the first 60 variables:  # odd varibles will be translated # even variables will be scaled transformation = list() for (i in 1:60) {   if (i %% 2) {     transformation[[i]] = substitute(function(x) x[, i] * 5, list(i = i))   } else transformation[[i]] = substitute(function(x) x[, i] - 10, list(i = i)) } # the remaining are returned as they are transformation[[61]] = function(x) x[, 61:100] # construct single transformation function from the list transformation = simdata::as_function_list(transformation)  # create simulation design sim_design = simdata::simdesign_mvtnorm(   relations = correlation_matrix,    transform_initial = transformation ) simdata::plot_cor_network(sim_design, seed = 2,                             vertex_labels = NA,                           edge_label_function = NULL,                           edge_width_function = function(x) 0.01,                           edge_weight_function = function(x) 0.25 * x,                            use_edge_weights = TRUE,                            edge.color = \"clipped-ramp\",                            vertex.size = 3) sim_data = simdata::simulate_data(sim_design, n_obs = 50, seed = 5)"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"parallel","dir":"Articles","previous_headings":"Advanced simulation setup","what":"Parallelization","title":"simdata: A package for creating simulated datasets","text":"example briefly shows use package together parallelization via clusters speed simulations. Unix-based systems, forking provides alternative method parallelize code, results even simpler code one . use setup Example 2. following code run ensure vignette builds system, can used system simdata package installed. Alternative parallel implementations future can used. Note random seed now set via options doRNG head foreach loop (within call simulate_data). Note simdata package needs explicitly passed foreach loop every thread access library. Windows specific, Unix-based systems necessary forking automatically makes library available child processes. Note global variable sim_design passed threads automatically, can forced via .export argument foreach loop results stored list.","code":"correlation_matrix = diag(1, nrow = 5) transformation = simdata::function_list(     \"v1\" = function(x) x[, 1],     \"v2*2\" = function(x) x[, 2] * 2,      \"v3^2\" = function(x) x[, 3]^2,     \"v4+v5\" = function(x) x[, 4] + x[, 5],      check.names = FALSE # pass columnnames exactly as specified here   )  sim_design = simdata::simdesign_mvtnorm(   relations = correlation_matrix,   transform_initial = transformation,    prefix_final = NULL )  # parallelisation cl = parallel::makeCluster(1) doParallel::registerDoParallel(cl) res = foreach(   i = 1:10,    .packages = c(\"simdata\"),   .options.RNG = 1 # note that the seed is passed here ) %dorng% {   simulate_data(sim_design, n_obs = 100)      # do some task with the simulated data } parallel::stopCluster(cl)  knitr::kable(purrr::map(res[1:2], summary))"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"partial-functions","dir":"Articles","previous_headings":"Advanced simulation setup","what":"Partial functions","title":"simdata: A package for creating simulated datasets","text":"simdata packages makes heavy use function objects define simulation designs (e.g. also NORTA based simulation). Sometimes may necessary fix parameters functions, define via code. Example 2 created variable v2*2 multiplying initial data times 2. wanted parametrize ? simply use global variable undesirable consequences, R may change value global value time (remove value, leads failure sampling procedure). can avoided use simdata::partial. requires specify transformation function two parameters, one fixed. simdata::partial can used fix arbitrary number parameters, may also help transformation defined inside another function (parameter set inside function may available outside).","code":"# parameter mult = 2 transformation = simdata::function_list(   \"v1\" = function(x) x[, 1] * mult # dangerous, depends on global variable! )  sim_design = simdata::simdesign_mvtnorm(         relations = diag(1),          transform_initial = transformation )  sample1 = simdata::simulate_data(sim_design, n_obs = 5, seed = 25897165)  # change value of global variable mult = 4 sample2 = simdata::simulate_data(sim_design, n_obs = 5, seed = 25897165)  # note the different values in both columns knitr::kable(cbind(sample1, sample2)) # parameter mult = 2 transformation = simdata::function_list(     # specify function as partial      \"v1\" = simdata::partial(function(x, mult) x[, 1] * mult, mult = mult) )  sim_design = simdata::simdesign_mvtnorm(         relations = diag(1),          transform_initial = transformation )  sample1 = simdata::simulate_data(sim_design, n_obs = 5, seed = 25897165)  # change value of global variable mult = 4 sample2 = simdata::simulate_data(sim_design, n_obs = 5, seed = 25897165)  # note both columns are equal now, as expected knitr::kable(cbind(sample1, sample2))"},{"path":"https://matherealize.github.io/simdata/articles/Demo.html","id":"rsession","dir":"Articles","previous_headings":"","what":"R session information","title":"simdata: A package for creating simulated datasets","text":"","code":"## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] parallel  stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] doRNG_1.8.6        rngtools_1.5.2     doParallel_1.0.17  iterators_1.0.14   ##  [5] foreach_1.5.2      knitr_1.43         GGally_2.1.2       reshape2_1.4.4     ##  [9] ggplot2_3.4.3      simdata_0.3.0.9003 ##  ## loaded via a namespace (and not attached): ##  [1] sass_0.4.7         utf8_1.2.3         generics_0.1.3     stringi_1.7.12     ##  [5] digest_0.6.33      magrittr_2.0.3     evaluate_0.21      grid_4.3.1         ##  [9] RColorBrewer_1.1-3 mvtnorm_1.2-3      fastmap_1.1.1      rprojroot_2.0.3    ## [13] plyr_1.8.8         jsonlite_1.8.7     reshape_0.8.9      purrr_1.0.2        ## [17] fansi_1.0.4        viridisLite_0.4.2  scales_1.2.1       codetools_0.2-19   ## [21] textshaping_0.3.6  jquerylib_0.1.4    cli_3.6.1          rlang_1.1.1        ## [25] munsell_0.5.0      withr_2.5.0        cachem_1.0.8       yaml_2.3.7         ## [29] tools_4.3.1        memoise_2.0.1      dplyr_1.1.2        colorspace_2.1-0   ## [33] vctrs_0.6.3        R6_2.5.1           lifecycle_1.0.3    stringr_1.5.0      ## [37] fs_1.6.3           ragg_1.2.5         pkgconfig_2.0.3    desc_1.4.2         ## [41] pkgdown_2.0.7      pillar_1.9.0       bslib_0.5.1        gtable_0.3.4       ## [45] glue_1.6.2         Rcpp_1.0.11        systemfonts_1.0.4  highr_0.10         ## [49] xfun_0.40          tibble_3.2.1       tidyselect_1.2.0   farver_2.1.1       ## [53] igraph_1.5.1       htmltools_0.5.6    labeling_0.4.2     rmarkdown_2.24     ## [57] compiler_4.3.1"},{"path":[]},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"simdata: NORTA based simulation designs","text":"document describes workflow define NORmal--Anything (NORTA) based simulation designs using simdata package. method useful re-create existing datasets parametric approximation usage simulation studies. also quite easy use, allows definition presets sharing simulation setups. General details methodology references given e.g.  Cario Nelson (1997) Ghosh Henderson (2003). vignette prefix relevant function calls :: show package implements function - necessary done demonstration purposes.","code":""},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"outline","dir":"Articles","previous_headings":"Introduction","what":"Outline of NORTA","title":"simdata: NORTA based simulation designs","text":"goal NORTA procedure produce identically independently distributed (iid) samples random variables given correlation structure (Pearson correlation matrix) given marginal distributions, thereby e.g. approximating existing datasets. Following Ghosh Henderson (2003), want sample iid replicates random vector \\(X = (X_1, X_2, \\ldots, X_k)\\). Denote \\(F_i(s) = P(X_i \\leq s)\\) distribution functions (.e. marginal distributions) components \\(X\\), \\(\\Sigma_X\\) \\(k \\times k\\) correlation matrix \\(X\\). NORTA proceeds follows: Generate multivariate standard normal random vectors (.e mean 0, variance 1) \\(Z = (Z_1, Z_2, \\ldots, Z_k)\\) correlation matrix \\(\\Sigma_Z\\). Compute random vector \\(X\\) via \\(X_i := F_i^{-1}(\\Phi(Z_i))\\), \\(\\Phi\\) denotes distribution function standard normal distribution, \\(F_i^{-1}(t) := \\inf\\{x: F_i(x) \\geq t\\}\\) quantile function \\(X_i\\). resulting vector \\(X\\) desired marginal distribution. obtain target correlation structure \\(\\Sigma_X\\), correlation matrix \\(\\Sigma_Z\\) first step chosen appropriately. can achieved via solving univariable optimisation problems pair variables \\(X_i\\) \\(X_j\\) \\(X\\) part simdata package.","code":""},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"caveats-of-norta","dir":"Articles","previous_headings":"Introduction","what":"Caveats of NORTA","title":"simdata: NORTA based simulation designs","text":"NORTA procedure known limitations, may lead discrepancies target correlation structure correlation structure obtained sampling process. , however, partly alleviated using existing datasets templates, special techniques within simdata. combinations given marginal distributions target correlation feasible nature variables. issue existing dataset used template, since demonstrates combination exists. optimisation procedure obtain \\(\\Sigma_Z\\) may lead matrix positive definite (since optimisation done pairs variables), therefore proper correlation matrix. alleviate , simdata package ensures positive definiteness using closest positive definite matrix instead. may lead discrepancies target correlation achieved correlation structure. NORTA reproduce non-linear relationships variables. optimisation procedure obtain \\(\\Sigma_Z\\) may take compute number variables increases. alleviated fact computation done single time, definition simulation design. simulation iterations use optimisation result therefore subject issue. applied existing dataset, NORTA relies estimation target correlation matrix marginal distributions. complex data (e.g. special marginal distributions, complex correlation structure) therefore requires observations accurate representation.","code":""},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"comparison-to-other-methods","dir":"Articles","previous_headings":"Introduction","what":"Comparison to other methods","title":"simdata: NORTA based simulation designs","text":"NORTA well suited re-create existing datasets explicit parametric approximation. Similar methods exist, achieve means. particularly interesting alternative generation synthetic datasets using approach closely related multiple imputation, implemented e.g. synthpop R package (Nowok, Raab, Dibben (2016)). ’ primary aim achieve confidentiality re-creating copies shared existing, sensitive datasets. comparison, synthpop potentially offers flexible data generation NORTA, thereby leading better approximation original dataset. However, synthpop also opaque explicit, user defined specification correlation marginal distributions NORTA. also entails synthpop can generally used like black-box approach, requires little user input, also less transparent manual curation simulation setup NORTA. Furthermore, NORTA allows easy changes design obtain wide variety study designs single template dataset, whereas synthpop targeted re-creating original dataset. methods therefore distinct usecases complement .","code":""},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"workflow-in-simdata","dir":"Articles","previous_headings":"","what":"Workflow in simdata","title":"simdata: NORTA based simulation designs","text":"Given outline method, user specify define NORTA design \\(k\\) variables \\(k \\times k\\) target correlation matrix \\(k\\) marginal distributions variable, given quantile functions can estimated existing datasets interest, circumventing limitations NORTA approach. See example setup within package.","code":""},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"some-common-distributions","dir":"Articles","previous_headings":"Workflow in simdata","what":"Some common distributions","title":"simdata: NORTA based simulation designs","text":"required marginal distributions given quantile functions. R provides implementations many standard distributions can directly used, see help distributions. quantile functions use prefix “q”, e.g. qnorm qbinom. implementations can found packages extraDistr, actuar many others (see https://cran.r-project.org/web/views/Distributions.html).","code":""},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"simdata: NORTA based simulation designs","text":"example setup NORTA based simulation design dataset extracted National Health Nutrition Examination Survey (NHANES), accessible R via several packages (use nhanesA package demo).","code":""},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"load-dataset","dir":"Articles","previous_headings":"Example","what":"Load dataset","title":"simdata: NORTA based simulation designs","text":"First load dataset extract several variables interest, namely gender (‘Gender’), age (‘Age’), race (‘Race’), weight (‘Weight’), bmi (‘BMI’), systolic (‘BPsys’) diastolic blood pressure (‘BPdia’). variabes demonstrate several different kinds distributions. detailed description data, please see documentation https://www.cdc.gov/nchs/nhanes.htm. concerned exact codings variables, add labels factor variables.","code":"df = nhanesA::nhanes(\"DEMO_J\") %>%    left_join(nhanesA::nhanes(\"BMX_J\")) %>%    left_join(nhanesA::nhanes(\"BPX_J\")) %>%    dplyr::select(Gender = RIAGENDR,                  Age = RIDAGEYR,                  Race = RIDRETH1,                  Weight = BMXWT,                  BMI = BMXBMI,                  BPsys = BPXSY1,                  BPdia = BPXDI1) %>%    filter(complete.cases(.)) %>%    filter(Age > 18)   print(head(df)) ##   Gender Age Race Weight  BMI BPsys BPdia ## 1      2  75    4   88.8 38.9   120    66 ## 2      1  56    5   62.1 21.3   108    68 ## 3      1  67    3   74.9 23.5   104    70 ## 4      1  71    5   65.6 22.5   112    60 ## 5      1  61    5   77.7 30.7   120    72 ## 6      1  22    3   74.4 24.5   116    62"},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"estimate-target-correlation","dir":"Articles","previous_headings":"Example","what":"Estimate target correlation","title":"simdata: NORTA based simulation designs","text":"Using dataset, first define target correlation cor_target plot .","code":"cor_target = cor(df) ggcorrplot::ggcorrplot(cor_target, lab = TRUE)"},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"define-marginal-distributions","dir":"Articles","previous_headings":"Example","what":"Define marginal distributions","title":"simdata: NORTA based simulation designs","text":", define list marginal distributions dist representing individual variables. entry list must function one argument, defining quantile function variable. order entries must correspond order target correlation cor_target. also use fitdistrplus::fitdist function find appropriate distribution candidates fit parameters. Decisions regarding fit distribution can made using e.g. Akaike information criterion (AIC) Bayesian information criterion (BIC) displayed summary fit object returned function (lower values, better fit). case parametric distribution doesn’t fit well, instead make use density estimate use define marginal quantile function. Gender: binomial distribution \\(P(2) \\approx 0.5\\). approximate using kernel density estimate using stats::density function. Note boundaries distribution can less smoothed cut parameter. obtain quantile function, first integrate density, normalize , use stats::approxfun derive univariable quantile function. Can also implemented using categorical distribution package LaplacesDemon implemented via qcat Weight: gamma distribution parameters estimated using fitdistrplus::fitdist BMI systolic blood pressure: log-normal distribution parameters estimated using fitdistrplus::fitdist Diastolic blood pressure: normal distribution parameters estimated using fitdistrplus::fitdist removing zero values data code implement marginal distributions shown . Helper functions ease workflow implemented future versions package.","code":"dist = list()  # gender dist[[\"Gender\"]] = function(x) qbinom(x, size = 1, prob = 0.5)  # age dens = density(df$Age, cut = 1) # cut defines how to deal with boundaries # integrate int_dens = cbind(Age = dens$x, cdf = cumsum(dens$y)) # normalize to obtain cumulative distribution function int_dens[, \"cdf\"] = int_dens[, \"cdf\"] / max(int_dens[, \"cdf\"]) # derive quantile function # outside the defined domain retun minimum and maximum age, respectively dist[[\"Age\"]] = approxfun(int_dens[, \"cdf\"], int_dens[, \"Age\"],                            yleft = min(int_dens[, \"Age\"]),                            yright = max(int_dens[, \"Age\"]))  # race dist[[\"Race\"]] = function(x)      cut(x, breaks = c(0, 0.135, 0.227, 0.575, 0.806, 1),          labels = 1:5)  # weight fit = fitdistrplus::fitdist(as.numeric(df$Weight), \"gamma\") summary(fit) dist[[\"Weight\"]] = function(x) qgamma(x, shape = 14.44, rate = 0.17)  # bmi fit = fitdistrplus::fitdist(as.numeric(df$BMI), \"lnorm\") summary(fit) dist[[\"BMI\"]] = function(x) qlnorm(x, meanlog = 3.36, sdlog = 0.23)  # systolic blood pressure fit = fitdistrplus::fitdist(as.numeric(df$BPsys), \"lnorm\") summary(fit) dist[[\"BPsys\"]] = function(x) qlnorm(x, meanlog = 4.83, sdlog = 0.15)  # diastolic blood pressure fit = fitdistrplus::fitdist(as.numeric(df %>%                                           filter(BPdia > 0) %>%                                           pull(BPdia)), \"norm\") summary(fit) dist[[\"BPdia\"]] = function(x) qnorm(x, mean = 72.42, sd = 11.95)"},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"simulate-data","dir":"Articles","previous_headings":"Example","what":"Simulate data","title":"simdata: NORTA based simulation designs","text":"Now can use simdata::simdesign_norta obtain design using specification. , simulate dataset size original data set using simdata::simulate_data, compare resulting summary statistics correlation structures.","code":"dsgn = simdata::simdesign_norta(cor_target_final = cor_target, dist = dist,                                  transform_initial = data.frame,                                 names_final = names(dist), seed_initial = 1) simdf = simdata::simulate_data(dsgn, nrow(df), seed = 2)"},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"results","dir":"Articles","previous_headings":"Example","what":"Results","title":"simdata: NORTA based simulation designs","text":"Summary statistics original simulated datasets. Correlation structures original simulated datasets.  may also inspect continuous variables regarding univariate bivariate distributions. original data shown black, simulated data shown red.  can observe, agreement original data simulated data generally quite good. Note, however, e.g. slightly non-linear relationship age diastolic blood pressure fully captured approach, expected. Furthermore, original data shows outliers, also reproducible due parametric nature NORTA procedure.","code":"summary(df) ##      Gender           Age             Race           Weight       ##  Min.   :1.000   Min.   :19.00   Min.   :1.000   Min.   : 36.20   ##  1st Qu.:1.000   1st Qu.:34.00   1st Qu.:3.000   1st Qu.: 66.90   ##  Median :2.000   Median :52.00   Median :3.000   Median : 79.00   ##  Mean   :1.511   Mean   :50.29   Mean   :3.257   Mean   : 82.68   ##  3rd Qu.:2.000   3rd Qu.:65.00   3rd Qu.:4.000   3rd Qu.: 94.70   ##  Max.   :2.000   Max.   :80.00   Max.   :5.000   Max.   :219.60   ##       BMI            BPsys           BPdia        ##  Min.   :14.80   Min.   : 72.0   Min.   :  0.00   ##  1st Qu.:24.70   1st Qu.:112.0   1st Qu.: 64.00   ##  Median :28.50   Median :124.0   Median : 72.00   ##  Mean   :29.69   Mean   :126.2   Mean   : 71.85   ##  3rd Qu.:33.50   3rd Qu.:136.0   3rd Qu.: 80.00   ##  Max.   :84.40   Max.   :224.0   Max.   :124.00 summary(simdf) ##      Gender            Age             Race           Weight       ##  Min.   :0.0000   Min.   :16.00   Min.   :1.000   Min.   : 26.18   ##  1st Qu.:0.0000   1st Qu.:34.04   1st Qu.:3.000   1st Qu.: 68.51   ##  Median :1.0000   Median :50.74   Median :3.000   Median : 82.24   ##  Mean   :0.5107   Mean   :49.91   Mean   :3.263   Mean   : 84.66   ##  3rd Qu.:1.0000   3rd Qu.:64.67   3rd Qu.:4.000   3rd Qu.: 98.63   ##  Max.   :1.0000   Max.   :82.89   Max.   :5.000   Max.   :206.00   ##       BMI            BPsys            BPdia        ##  Min.   :12.44   Min.   : 64.69   Min.   : 28.25   ##  1st Qu.:24.48   1st Qu.:113.66   1st Qu.: 64.33   ##  Median :28.55   Median :125.28   Median : 72.42   ##  Mean   :29.50   Mean   :127.05   Mean   : 72.47   ##  3rd Qu.:33.61   3rd Qu.:138.92   3rd Qu.: 80.65   ##  Max.   :64.72   Max.   :204.22   Max.   :117.18"},{"path":"https://matherealize.github.io/simdata/articles/NORTA_demo.html","id":"rsession","dir":"Articles","previous_headings":"","what":"R session information","title":"simdata: NORTA based simulation designs","text":"","code":"## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] ggcorrplot_0.1.4    patchwork_1.1.3     ggplot2_3.4.3       ## [4] dplyr_1.1.2         fitdistrplus_1.1-11 survival_3.5-5      ## [7] MASS_7.3-60         nhanesA_0.7.4       simdata_0.3.0.9003  ##  ## loaded via a namespace (and not attached): ##  [1] sass_0.4.7        utf8_1.2.3        generics_0.1.3    xml2_1.3.5        ##  [5] stringi_1.7.12    lattice_0.21-8    digest_0.6.33     magrittr_2.0.3    ##  [9] evaluate_0.21     grid_4.3.1        mvtnorm_1.2-3     fastmap_1.1.1     ## [13] rprojroot_2.0.3   plyr_1.8.8        jsonlite_1.8.7    Matrix_1.5-4.1    ## [17] httr_1.4.7        rvest_1.0.3       purrr_1.0.2       fansi_1.0.4       ## [21] scales_1.2.1      textshaping_0.3.6 jquerylib_0.1.4   cli_3.6.1         ## [25] rlang_1.1.1       munsell_0.5.0     splines_4.3.1     withr_2.5.0       ## [29] cachem_1.0.8      yaml_2.3.7        tools_4.3.1       reshape2_1.4.4    ## [33] memoise_2.0.1     colorspace_2.1-0  vctrs_0.6.3       R6_2.5.1          ## [37] lifecycle_1.0.3   stringr_1.5.0     fs_1.6.3          foreign_0.8-84    ## [41] ragg_1.2.5        pkgconfig_2.0.3   desc_1.4.2        gtable_0.3.4      ## [45] pkgdown_2.0.7     bslib_0.5.1       pillar_1.9.0      glue_1.6.2        ## [49] Rcpp_1.0.11       systemfonts_1.0.4 highr_0.10        xfun_0.40         ## [53] tibble_3.2.1      tidyselect_1.2.0  knitr_1.43        farver_2.1.1      ## [57] htmltools_0.5.6   labeling_0.4.2    rmarkdown_2.24    compiler_4.3.1"},{"path":[]},{"path":"https://matherealize.github.io/simdata/articles/Technical_documentation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"simdata: Technical documentation","text":"document intended elaborate inner workings simdata package, users may wish extend purposes. simdata package based simple idea: simdesign S3 class, concrete subclass implemented user, provides data generating mechanism, stores necessary data simulate data data generating mechanism simulate_data method simdesign class, actually implements drawing data generating mechanism key functionalities can embellished features adapt task interest. presented Demo vignette package. package provides utilities around core functionality, assist simulation tasks, essential usage package.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Technical_documentation.html","id":"simdesign-s3-class","dir":"Articles","previous_headings":"","what":"simdesign S3 class","title":"simdata: Technical documentation","text":"main class package simdesign S3 class. list class attribute simdesign entries defined documentation simdesign class.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Technical_documentation.html","id":"subclassing-simdesign","dir":"Articles","previous_headings":"simdesign S3 class","what":"Subclassing simdesign","title":"simdata: Technical documentation","text":"template constructor implementing subclass specific simulation design given : Examples actual implementations provided Demo vignette package.","code":"# constructor takes any number of arguments arg1, arg2, and so on # and it must use the elipsis ... as final argument new_simdesign <- function(arg1, arg2, ...) {          # define generator function in one argument     generator = function(n) {         # implement data generating mechanism         # make use of any argument passed to the new_simdesign constructor         # make sure it returns a two-dimensional array     }          # setup simdesign subclass     # make sure to pass generator function and ...     # all other information passed is optional     dsgn = simdesign(         generator = generator,          arg1 = arg1,          arg2 = arg2,          ...     )          # extend the class attribute      class(dsgn) = c(\"binomial_simdesign\", class(dsgn))          # return the object     dsgn }"},{"path":[]},{"path":"https://matherealize.github.io/simdata/articles/Technical_documentation.html","id":"simulate_data-method","dir":"Articles","previous_headings":"Simulation of data","what":"simulate_data method","title":"simdata: Technical documentation","text":"data generation simulate_data method follows simple recipe. principle, method can used without simdesign object, assume used together. following graphic, circular shapes denote functions.  Relevant input: function stored generator field simdesignclass, n_obs (number observations), argument passed simulate_data specified documentation Output: initial generated dataset Z Relevant input: Z, function stored transform_initial field simdesign class (can implemented using function_list, see documentation package) Default: base::identity used return dataset Z unchanged Output: final generated dataset X Relevant input: X, functions stored process_final field simdesign object Default: base::identity used return dataset X unchanged Output: post-processed dataset X'. final output method dataset (matrix data.frame depending data generating mechanism) can used analysis steps.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Technical_documentation.html","id":"implemented-methods","dir":"Articles","previous_headings":"Simulation of data > simulate_data method","what":"Implemented methods","title":"simdata: Technical documentation","text":"simulate_data S3 method, implements simulate_data.default: default method actual work simulate_data.simdesign: calls simulate_data.default appropriate parameters stored simdesign object; intended way use function","code":""},{"path":"https://matherealize.github.io/simdata/articles/Technical_documentation.html","id":"simulate_data_conditional-function","dir":"Articles","previous_headings":"Simulation of data","what":"simulate_data_conditional function","title":"simdata: Technical documentation","text":"Data can simulated conform specific user-specified constraints. constraints implemented rejection function applied simulated dataset. datasets function returns FALSE (.e. rejected) returned. implemented repeatedly calling simulate_data obtain new instances datasets data generating mechanism, either rejection function accepts dataset, maximum number iterations conducted. process depicted following diagram, circular shaps denote functions.","code":""},{"path":"https://matherealize.github.io/simdata/articles/Technical_documentation.html","id":"rsession","dir":"Articles","previous_headings":"","what":"R session information","title":"simdata: Technical documentation","text":"","code":"## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43        rlang_1.1.1       ##  [5] xfun_0.40         stringi_1.7.12    purrr_1.0.2       textshaping_0.3.6 ##  [9] jsonlite_1.8.7    glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.6   ## [13] ragg_1.2.5        sass_0.4.7        rmarkdown_2.24    evaluate_0.21     ## [17] jquerylib_0.1.4   fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3   ## [21] memoise_2.0.1     stringr_1.5.0     compiler_4.3.1    fs_1.6.3          ## [25] systemfonts_1.0.4 digest_0.6.33     R6_2.5.1          magrittr_2.0.3    ## [29] bslib_0.5.1       tools_4.3.1       pkgdown_2.0.7     cachem_1.0.8      ## [33] desc_1.4.2"},{"path":"https://matherealize.github.io/simdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Kammer. Author, maintainer.","code":""},{"path":"https://matherealize.github.io/simdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kammer M (2023). simdata: Generate Simulated Datasets. https://matherealize.github.io/simdata/, https://github.com/matherealize/simdata.","code":"@Manual{,   title = {simdata: Generate Simulated Datasets},   author = {Michael Kammer},   year = {2023},   note = {https://matherealize.github.io/simdata/, https://github.com/matherealize/simdata}, }"},{"path":"https://matherealize.github.io/simdata/index.html","id":"simdata-an-r-package-to-create-simulated-datasets","dir":"","previous_headings":"","what":"Generate Simulated Datasets","title":"Generate Simulated Datasets","text":"package provides lightweight easy--use data generating mechanisms statistical simulation studies.","code":""},{"path":"https://matherealize.github.io/simdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Simulated Datasets","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"matherealize/simdata\")  # to also build vignettes locally use # devtools::install_github(\"matherealize/simdata\", build_vignettes = TRUE)"},{"path":"https://matherealize.github.io/simdata/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate Simulated Datasets","text":"Please take look package vignettes: Introduction simdata package basic workflow Introduction NORTA based simulation workflow Technical documentation, implementation overview","code":""},{"path":"https://matherealize.github.io/simdata/index.html","id":"status-and-future-plans","dir":"","previous_headings":"","what":"Status and future plans","title":"Generate Simulated Datasets","text":"package active development, already used several simulation studies. plan provide library data generators interesting real-world dataset upcoming versions package.","code":""},{"path":"https://matherealize.github.io/simdata/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Generate Simulated Datasets","text":"feedback issues working package please create new Issue Github send email.","code":""},{"path":"https://matherealize.github.io/simdata/reference/apply_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to apply functions — apply_array","title":"Helper to apply functions — apply_array","text":"Used make use apply-like operations, regardless wether input matrix data.frame","code":""},{"path":"https://matherealize.github.io/simdata/reference/apply_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to apply functions — apply_array","text":"","code":"apply_array(obj, dim, fun)"},{"path":"https://matherealize.github.io/simdata/reference/apply_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to apply functions — apply_array","text":"obj Matrix data.frame. dim Dimension apply function . fun Function object apply.","code":""},{"path":"https://matherealize.github.io/simdata/reference/as_function_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create function_list object from list of functions — as_function_list","title":"Create function_list object from list of functions — as_function_list","text":"Create function_list object list functions. useful list created programmatically.","code":""},{"path":"https://matherealize.github.io/simdata/reference/as_function_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create function_list object from list of functions — as_function_list","text":"","code":"as_function_list(flist, ...)"},{"path":"https://matherealize.github.io/simdata/reference/as_function_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create function_list object from list of functions — as_function_list","text":"flist List entry function object. Can named unnamed. ... Passed function_list.","code":""},{"path":"https://matherealize.github.io/simdata/reference/as_function_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create function_list object from list of functions — as_function_list","text":"Function single input outputs data.frame. special 'flist' entry environment stores individual functions list.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/colapply_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply list of functions to column of object — colapply_functions","title":"Apply list of functions to column of object — colapply_functions","text":"Helper function simplify workflow lists functions.","code":""},{"path":"https://matherealize.github.io/simdata/reference/colapply_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply list of functions to column of object — colapply_functions","text":"","code":"colapply_functions(obj, flist)"},{"path":"https://matherealize.github.io/simdata/reference/colapply_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply list of functions to column of object — colapply_functions","text":"obj 2-dimensional array (matrix data.frame). flist List functions length equal number columns obj. entry must function applicable single column obj. -th entry flist applied -th column obj.","code":""},{"path":"https://matherealize.github.io/simdata/reference/colapply_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply list of functions to column of object — colapply_functions","text":"Matrix data.frame (type obj) names taken obj.","code":""},{"path":"https://matherealize.github.io/simdata/reference/contains_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if matrix contains constant column(s) — contains_constant","title":"Check if matrix contains constant column(s) — contains_constant","text":"Check matrix contains constant column(s)","code":""},{"path":"https://matherealize.github.io/simdata/reference/contains_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if matrix contains constant column(s) — contains_constant","text":"","code":"contains_constant(x, eps = .Machine$double.eps)"},{"path":"https://matherealize.github.io/simdata/reference/contains_constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if matrix contains constant column(s) — contains_constant","text":"x Matrix Data.frame. eps Threshold standard deviation column considered constant.","code":""},{"path":"https://matherealize.github.io/simdata/reference/contains_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if matrix contains constant column(s) — contains_constant","text":"TRUE one columns standard deviation `eps``, else FALSE.","code":""},{"path":"https://matherealize.github.io/simdata/reference/contains_constant.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if matrix contains constant column(s) — contains_constant","text":"Prints warning constant found.","code":""},{"path":"https://matherealize.github.io/simdata/reference/cor_from_upper.html","id":null,"dir":"Reference","previous_headings":"","what":"Build correlation matrix — cor_from_upper","title":"Build correlation matrix — cor_from_upper","text":"Use specify correlation matrix convenient way giving entries upper triangular part.","code":""},{"path":"https://matherealize.github.io/simdata/reference/cor_from_upper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build correlation matrix — cor_from_upper","text":"","code":"cor_from_upper(n_var, entries = NULL)"},{"path":"https://matherealize.github.io/simdata/reference/cor_from_upper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build correlation matrix — cor_from_upper","text":"n_var Integer, number variables (= rows = columns matrix). entries Matrix correlation entries. Consists 3 columns (variable_1, variable_2, correlation) specify variables corresponding correlation upper triangular part matrix (.e. variable_1 < variable_2) .","code":""},{"path":"https://matherealize.github.io/simdata/reference/cor_from_upper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build correlation matrix — cor_from_upper","text":"Matrix user supplied entries.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/cor_from_upper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build correlation matrix — cor_from_upper","text":"","code":"if (FALSE) { cor_from_upper(2, rbind(c(1, 2, 0.8))) }"},{"path":"https://matherealize.github.io/simdata/reference/cor_to_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert correlation matrix to covariance matrix — cor_to_cov","title":"Convert correlation matrix to covariance matrix — cor_to_cov","text":"Rescale correlation matrix variable standard deviations yield covariance matrix.","code":""},{"path":"https://matherealize.github.io/simdata/reference/cor_to_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert correlation matrix to covariance matrix — cor_to_cov","text":"","code":"cor_to_cov(m, sds = NULL)"},{"path":"https://matherealize.github.io/simdata/reference/cor_to_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert correlation matrix to covariance matrix — cor_to_cov","text":"m Symmetric correlation matrix. sds Standard deviations variables. Set 1 varirables default.","code":""},{"path":"https://matherealize.github.io/simdata/reference/cor_to_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert correlation matrix to covariance matrix — cor_to_cov","text":"Symmetric covariance matrix.","code":""},{"path":"https://matherealize.github.io/simdata/reference/cor_to_upper.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert correlation matrix to specification used by\ncor_from_upper — cor_to_upper","title":"Convert correlation matrix to specification used by\ncor_from_upper — cor_to_upper","text":"Convert correlation matrix specification used cor_from_upper","code":""},{"path":"https://matherealize.github.io/simdata/reference/cor_to_upper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert correlation matrix to specification used by\ncor_from_upper — cor_to_upper","text":"","code":"cor_to_upper(m, remove_below = .Machine$double.eps)"},{"path":"https://matherealize.github.io/simdata/reference/cor_to_upper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert correlation matrix to specification used by\ncor_from_upper — cor_to_upper","text":"m Symmetric correlation matrix. remove_below Threshold absolute correlation values removed returned matrix. NULL filtering applied.","code":""},{"path":"https://matherealize.github.io/simdata/reference/cor_to_upper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert correlation matrix to specification used by\ncor_from_upper — cor_to_upper","text":"Matrix 3 columns (variable_1, variable_2, correlation), correlation gives entry position (variable_1, variable_2) input correlation matrix. Note variable_1 < variable_2 holds entries.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/do_processing.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-processing of datamatrix — do_processing","title":"Post-processing of datamatrix — do_processing","text":"Applies functions matrix data.frame.","code":""},{"path":"https://matherealize.github.io/simdata/reference/do_processing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-processing of datamatrix — do_processing","text":"","code":"do_processing(x, functions = list())"},{"path":"https://matherealize.github.io/simdata/reference/do_processing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-processing of datamatrix — do_processing","text":"x Matrix Data.frame. functions List lists, specifying functions applied well arguments. See details.","code":""},{"path":"https://matherealize.github.io/simdata/reference/do_processing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-processing of datamatrix — do_processing","text":"Matrix data.frame post-processing applied.","code":""},{"path":"https://matherealize.github.io/simdata/reference/do_processing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Post-processing of datamatrix — do_processing","text":"Functions passed post-processor named list. name f list entry function applied via base::.call. list entry another named list, specifying arguments function f named arguments. functions must take matrix data.frame first argument return another matrix data.frame dimensions single output. Examples post-processing steps truncation (process_truncate_by_iqr, process_truncate_by_threshold) centering / standardizing data (via scale, see example section ). Can useful apply simulated datasets, even outside simulation function (e.g. standardization required modeling step).","code":""},{"path":"https://matherealize.github.io/simdata/reference/do_processing.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Post-processing of datamatrix — do_processing","text":"Use caution - error checking done now user take care everything ! Furthermore, output functions checked either.","code":""},{"path":"https://matherealize.github.io/simdata/reference/do_processing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-processing of datamatrix — do_processing","text":"","code":"if (FALSE) { do_processing(diag(5),     functions = list(scale = list(center = TRUE, scale = FALSE))) }"},{"path":"https://matherealize.github.io/simdata/reference/estimate_final_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate correlation matrix via simulation — estimate_final_correlation","title":"Estimate correlation matrix via simulation — estimate_final_correlation","text":"Used obtain estimate correlation matrix transforming initial data.","code":""},{"path":"https://matherealize.github.io/simdata/reference/estimate_final_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate correlation matrix via simulation — estimate_final_correlation","text":"","code":"estimate_final_correlation(   obj,   n_obs = 1e+05,   cor_type = \"pearson\",   seed = NULL,   ... )"},{"path":"https://matherealize.github.io/simdata/reference/estimate_final_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate correlation matrix via simulation — estimate_final_correlation","text":"obj S3 class object type simdesign (inheriting ). n_obs Number observations simulate. cor_type Can either character (pearson, spearman, kendall) passed stats::cor function, directly used compute correlation matrix simulated data. function expected take single input matrix (possibly arguments can set via ...) output single matrix. seed Random number seed. NULL change current seed. ... arguments passed function computes correlation matrix (either stats::cor user provided function).","code":""},{"path":"https://matherealize.github.io/simdata/reference/estimate_final_correlation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate correlation matrix via simulation — estimate_final_correlation","text":"function useful estimate final correlation data transformation initial data. provide robust estimate advised use large number observations compute correlation matrix.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/function_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply list of functions to input — function_list","title":"Apply list of functions to input — function_list","text":"Apply list functions input","code":""},{"path":"https://matherealize.github.io/simdata/reference/function_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply list of functions to input — function_list","text":"","code":"function_list(..., stringsAsFactors = FALSE, check.names = TRUE)"},{"path":"https://matherealize.github.io/simdata/reference/function_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply list of functions to input — function_list","text":"... Named unnamed arguments, function taking exactly one input. See details. stringsAsFactors, check.names Arguments data.frame.","code":""},{"path":"https://matherealize.github.io/simdata/reference/function_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply list of functions to input — function_list","text":"Function single input outputs data.frame. special 'flist' entry environment stores individual functions list.","code":""},{"path":"https://matherealize.github.io/simdata/reference/function_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply list of functions to input — function_list","text":"convenience function takes number functions returns another function applies user specified functions new input, collects results list data.frame. useful e.g. transform columns data.frame check validity matrix simulations. See example simulate_data_conditional. assumptions individual functions : function expected take single input. function expected output result consistent functions (.e. output length) ensure results can summarized data.frame.","code":""},{"path":"https://matherealize.github.io/simdata/reference/function_list.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Apply list of functions to input — function_list","text":"function works fine without naming input arguments, resulting data.frames empty column names case. Thus, recommended pass named function arguments.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/function_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply list of functions to input — function_list","text":"","code":"if (FALSE) { f <- function_list(     v1 = function(x) x[, 1] * 2,     v2 = function(x) x[, 2] + 10)  f(diag(2))  # function_list can be used to add new columns # naming of columns should be handled separately in such cases  f <- function_list(     function(x) x, # return x as it is     X1_X2 = function(x) x[, 2] + 10) # add new column  f(diag(2)) }"},{"path":"https://matherealize.github.io/simdata/reference/get_from_function_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract individual functions from function_list — get_from_function_list","title":"Extract individual functions from function_list — get_from_function_list","text":"Extract individual function objects environment function_list object.","code":""},{"path":"https://matherealize.github.io/simdata/reference/get_from_function_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract individual functions from function_list — get_from_function_list","text":"","code":"get_from_function_list(flist)"},{"path":"https://matherealize.github.io/simdata/reference/get_from_function_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract individual functions from function_list — get_from_function_list","text":"flist function_list function object.","code":""},{"path":"https://matherealize.github.io/simdata/reference/get_from_function_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract individual functions from function_list — get_from_function_list","text":"List named unnamed entries corresponding individual function objects passed function_list object. flist simple function, returns NULL.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/get_names_from_function_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract names of individual functions from function_list — get_names_from_function_list","title":"Extract names of individual functions from function_list — get_names_from_function_list","text":"Extract names  individual function objects environment function_list object.","code":""},{"path":"https://matherealize.github.io/simdata/reference/get_names_from_function_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract names of individual functions from function_list — get_names_from_function_list","text":"","code":"get_names_from_function_list(flist)"},{"path":"https://matherealize.github.io/simdata/reference/get_names_from_function_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract names of individual functions from function_list — get_names_from_function_list","text":"flist function_list function object.","code":""},{"path":"https://matherealize.github.io/simdata/reference/get_names_from_function_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract names of individual functions from function_list — get_names_from_function_list","text":"Names list corresponding individual function objects passed function_list object. flist simple function, returns NULL.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/is_collinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if matrix is collinear — is_collinear","title":"Check if matrix is collinear — is_collinear","text":"Check matrix collinear","code":""},{"path":"https://matherealize.github.io/simdata/reference/is_collinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if matrix is collinear — is_collinear","text":"","code":"is_collinear(x)"},{"path":"https://matherealize.github.io/simdata/reference/is_collinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if matrix is collinear — is_collinear","text":"x Matrix Data.frame.","code":""},{"path":"https://matherealize.github.io/simdata/reference/is_collinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if matrix is collinear — is_collinear","text":"TRUE matrix collinear, else FALSE.","code":""},{"path":"https://matherealize.github.io/simdata/reference/is_collinear.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if matrix is collinear — is_collinear","text":"Prints warning collinear.","code":""},{"path":"https://matherealize.github.io/simdata/reference/is_cor_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if matrix is a correlation matrix — is_cor_matrix","title":"Check if matrix is a correlation matrix — is_cor_matrix","text":"Checks matrix numeric, symmetric, diagonal elements one, entries [-1, 1], positive definite. Prints warning problem found.","code":""},{"path":"https://matherealize.github.io/simdata/reference/is_cor_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if matrix is a correlation matrix — is_cor_matrix","text":"","code":"is_cor_matrix(m, tol = 1e-09)"},{"path":"https://matherealize.github.io/simdata/reference/is_cor_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if matrix is a correlation matrix — is_cor_matrix","text":"m Matrix.","code":""},{"path":"https://matherealize.github.io/simdata/reference/is_cor_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if matrix is a correlation matrix — is_cor_matrix","text":"TRUE matrix correlation matrix, else FALSE.","code":""},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_for_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Find pairwise initial correlation for NORTA from target correlation — optimize_cor_for_pair","title":"Find pairwise initial correlation for NORTA from target correlation — optimize_cor_for_pair","text":"function can used find suitable initial correlation use NORTA procedure pair variables given marginal distributions target correlation.","code":""},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_for_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find pairwise initial correlation for NORTA from target correlation — optimize_cor_for_pair","text":"","code":"optimize_cor_for_pair(   cor_target,   dist1,   dist2,   n_obs = 1e+05,   seed = NULL,   tol = 0.01,   ... )"},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_for_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find pairwise initial correlation for NORTA from target correlation — optimize_cor_for_pair","text":"cor_target Target correlation variable pair. dist1, dist2 Marginal distributions variable pair, given univariable quantile functions. n_obs Number observations used numerical optimization procedure. seed Seed generating standard normal random variables numerical optimization procedure. tol, ... parameters passed stats::uniroot.","code":""},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_for_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find pairwise initial correlation for NORTA from target correlation — optimize_cor_for_pair","text":"Output stats::uniroot univariable optimization find initial correlation.","code":""},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_for_pair.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find pairwise initial correlation for NORTA from target correlation — optimize_cor_for_pair","text":"Uses stats::uniroot actual optimization.","code":""},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Find initial correlation matrix for NORTA from target correlation — optimize_cor_mat","title":"Find initial correlation matrix for NORTA from target correlation — optimize_cor_mat","text":"function can used find suitable correlation matrix used simulating initial multivariate normal data NORTA based simulation design (see simdesign_norta).","code":""},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find initial correlation matrix for NORTA from target correlation — optimize_cor_mat","text":"","code":"optimize_cor_mat(   cor_target,   dist,   ensure_cor_mat = TRUE,   conv_norm_type = \"O\",   return_diagnostics = FALSE,   ... )"},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find initial correlation matrix for NORTA from target correlation — optimize_cor_mat","text":"cor_target Target correlation matrix. dist List functions marginal distributions simulated variables. Must length specified correlation matrix (cor_target), order entries must correspond variables correlation matrix. See simdesign_norta details specification marginal distributions. ensure_cor_mat TRUE, function ensures optimized matrix proper correlation matrix ensuring positive definitiness. FALSE, optimized matrix returned . conv_norm_type Metric used find closest positive definite matrix optimal matrix, used ensure_cor_mat TRUE. Passed Matrix::nearPD. return_diagnostics TRUE return additional diagnostics optimization procedure, see . ... Additional parameters passed optimize_cor_for_pair.","code":""},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find initial correlation matrix for NORTA from target correlation — optimize_cor_mat","text":"return_diagnostics FALSE, correlation matrix used definition simdesign_norta object. TRUE, list two entries: cor_mat containing correlation matrix, convergence containing list objects returned individual optimisation problems stats::uniroot.","code":""},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find initial correlation matrix for NORTA from target correlation — optimize_cor_mat","text":"function first finds suitable correlation matrix underlying multivariate normal data used NORTA procedure. solving k*(k-1) univariable optimisation problems (k number variables). case result positive-definite matrix, nearest positive-definite matrix found according user specified metric using Matrix::nearPD. See e.g. Ghosh Henderson (2003) overview procedure.","code":""},{"path":"https://matherealize.github.io/simdata/reference/optimize_cor_mat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find initial correlation matrix for NORTA from target correlation — optimize_cor_mat","text":"Ghosh, S. Henderson, S. G. (2003) Behavior NORTA method correlated random vector generation dimension increases. ACM Transactions Modeling Computer Simulation.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/partial.html","id":null,"dir":"Reference","previous_headings":"","what":"Define partial function — partial","title":"Define partial function — partial","text":"Partial functions useful define marginal distributions based additional parameters.","code":""},{"path":"https://matherealize.github.io/simdata/reference/partial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define partial function — partial","text":"","code":"partial(f, ...)"},{"path":"https://matherealize.github.io/simdata/reference/partial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define partial function — partial","text":"f Function two parameters. ... Parameters held fixed function f.","code":""},{"path":"https://matherealize.github.io/simdata/reference/partial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define partial function — partial","text":"Function object.","code":""},{"path":"https://matherealize.github.io/simdata/reference/partial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define partial function — partial","text":"helper function stores passed arguments list, stores list environment returned function. Thus, remembers arguments held fixed, returned partial function now function fewer arguments.","code":""},{"path":"https://matherealize.github.io/simdata/reference/partial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define partial function — partial","text":"","code":"marginal <- partial(function(x, meanx) qnorm(x, meanx), meanx = 2) marginal(0.5) #> [1] 2"},{"path":"https://matherealize.github.io/simdata/reference/plot_cor_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize fixed correlation structure as a network — plot_cor_network","title":"Visualize fixed correlation structure as a network — plot_cor_network","text":"Useful visualize e.g. associations initial multivariate gaussian distribution used simdesign_mvtnorm.","code":""},{"path":"https://matherealize.github.io/simdata/reference/plot_cor_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize fixed correlation structure as a network — plot_cor_network","text":"","code":"plot_cor_network(obj, ...)  # S3 method for default plot_cor_network(   obj,   categorical_indices = NULL,   decimals = 2,   cor_cutoff = 0.1,   vertex_labels = NULL,   vertex_label_prefix = \"z\",   edge_width_function = function(x) x * 10,   edge_label_function = function(x) round(x, decimals),   use_edge_weights = FALSE,   edge_weight_function = base::identity,   seed = NULL,   return_network = FALSE,   mar = c(0, 0, 0, 0),   vertex.size = 12,   margin = 0,   asp = 0,   vertex.color = \"#ececec\",   vertex.frame.color = \"#979797\",   vertex.label.color = \"black\",   edge.color = \"ramp\",   edge.label.color = \"black\",   edge.label.cex = 0.8,   ... )  # S3 method for simdesign_mvtnorm plot_cor_network(obj, ...)"},{"path":"https://matherealize.github.io/simdata/reference/plot_cor_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize fixed correlation structure as a network — plot_cor_network","text":"obj Correlation matrix S3 class object class method available (see ). ... Passed igraph::plot, complete list arguments details given igraph.plotting. categorical_indices Vector indices variables drawn rectangles (.e. represent categorical data). decimals Number decimals, used default labeling network edges. cor_cutoff Threshold absolute correlation nodes considered connected. Useful control complexity drawn network. Set NULL disable. vertex_labels Character vector length nrow(obj) labels vertices. NULL, overrides vertex_label_prefix argument. set NA omits vertex labels. vertex_label_prefix String added prefix node labels. edge_width_function Function takes one vector input (absolute correlation values) outputs transformation vector (must >= 0). Defines edge widths. edge_label_function Function takes vector input (absolute correlation values) outputs labels values character vector. Defines edges labels. set NULL, edge labels displayed. use_edge_weights Logical, TRUE layout influenced absolute correlations (.e. edge weights) highly correlated variables put closer together. FALSE, layout independent correlation structure. edge_weight_function Function takes one vector input (absolute correlation values) outputs transformation vector (must >= 0). Defines edge weights. relevant use_edge_weights TRUE. seed Set random seed ensure reproducibility results. Can fixed obtain layout vary edge widths, correlation functions etc. Can also used obtain nicer looking graph layouts. return_network TRUE, igraph network object returned can plotted user using e.g. interactive igraph::tkplot function. mar mar argument par function set margins plot (often required axes drawn). numerical vector form c(bottom, left, top, right) gives number lines margin specified four sides plot. default c(5, 4, 4, 2) + 0.1. Note argument margin argument igraph::plot.igraph function. vertex.size, margin, asp, vertex.frame.color, vertex.label.color, edge.label.color, edge.label.cex Arguments igraph::plot, sensible defaults package's usage. vertex.color Argument passed igraph::plot. Usually character vector hex color specification vertex color. Alternatively function takes input data.frame column \"id\" gives column number simulated data, outputs valid color specification corresponding vertices (.e. single character hex color vector hex colors appropriate length). edge.color Argument passed igraph::plot. package implements special functionality: edge.color = \"ramp\" colorramp red (-1) via white (0) blue (1) mapped correlations edges colored accordingly. edge.color = \"clipped-ramp\" ramp restricted correlation values observed, may useful low increase visibility. edge.color = \"red-blue\" edges positive correlation values colored uniformly red, edges negative correlations colored uniformly blue. Alternatively, may function takes input edge correlation values outputs valid color specifications (.e. single hex color vector hex colors appropriate length).","code":""},{"path":"https://matherealize.github.io/simdata/reference/plot_cor_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize fixed correlation structure as a network — plot_cor_network","text":"explanation parameters listed , please refer igraph::plot.","code":""},{"path":"https://matherealize.github.io/simdata/reference/plot_cor_network.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Visualize fixed correlation structure as a network — plot_cor_network","text":"plot_cor_network(default): Function used correlation matrix. plot_cor_network(simdesign_mvtnorm): Function used simdesign_mvtnorm S3 class object visualize initial correlation network underlying multivariate normal distribution.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/plot_estimated_cor_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize estimated correlation matrix as a network — plot_estimated_cor_network","title":"Visualize estimated correlation matrix as a network — plot_estimated_cor_network","text":"Based approximation via simulation specified given simulation design. Convenience wrapper combining estimate_final_correlation plot_cor_network.","code":""},{"path":"https://matherealize.github.io/simdata/reference/plot_estimated_cor_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize estimated correlation matrix as a network — plot_estimated_cor_network","text":"","code":"plot_estimated_cor_network(   obj,   n_obs = 1e+05,   cor_type = \"pearson\",   seed = NULL,   show_categorical = TRUE,   ... )"},{"path":"https://matherealize.github.io/simdata/reference/plot_estimated_cor_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize estimated correlation matrix as a network — plot_estimated_cor_network","text":"obj S3 class object type simdesign (inheriting ). n_obs Number observations simulate. cor_type Can either character (pearson, spearman, kendall) passed stats::cor function, directly used compute correlation matrix simulated data. function expected take single input matrix (possibly arguments can set via ...) output single matrix. seed Random number seed. NULL change current seed. show_categorical TRUE, marks categorical variables differently numeric ones. Determined types_final slot obj argument. ... Passed plot_cor_network.","code":""},{"path":"https://matherealize.github.io/simdata/reference/plot_estimated_cor_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize estimated correlation matrix as a network — plot_estimated_cor_network","text":"function useful estimate correlation network simulation setup initial underlying distribution Z transformed final dataset X.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_iqr.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate columns of datamatrix at datamatrix specific thresholds — process_truncate_by_iqr","title":"Truncate columns of datamatrix at datamatrix specific thresholds — process_truncate_by_iqr","text":"Truncation based interquartile range applied dataset.","code":""},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_iqr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate columns of datamatrix at datamatrix specific thresholds — process_truncate_by_iqr","text":"","code":"process_truncate_by_iqr(x, truncate_multipliers = NA, only_numeric = TRUE)"},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_iqr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate columns of datamatrix at datamatrix specific thresholds — process_truncate_by_iqr","text":"x Matrix Data.frame. truncate_multipliers Vector truncation parameters. Either single value replicated necessary dimension ncol(x). vector entry NA, corresponding column truncated. named, names must correspond columnnames x, specified columns processed. See details. only_numeric TRUE x data.frame, columns type numeric processed. Otherwise columns processed (e.g. also case x matrix).","code":""},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_iqr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate columns of datamatrix at datamatrix specific thresholds — process_truncate_by_iqr","text":"Matrix data.frame dimensions input.","code":""},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_iqr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncate columns of datamatrix at datamatrix specific thresholds — process_truncate_by_iqr","text":"Truncation processed follows: Compute 1st 3rd quartile q1 / q3 variables x. Multiply quantities values truncate_multipliers obtain L U. value NA, corresponding variable truncated. Set value smaller / larger L / U L / U. Truncation multipliers can specified three ways (note whenever only_numeric set TRUE, numeric columns affected): single numeric - columns processed way numeric vector without names - assumed length can replicated number columns x, column processed corresponding value vector numeric vector names - length can differ columns x columns names occur vector processed","code":""},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate columns of datamatrix at specified thresholds — process_truncate_by_threshold","title":"Truncate columns of datamatrix at specified thresholds — process_truncate_by_threshold","text":"Truncation based fixed thresholds applied dataset. Allows implement truncation measures derived overall data generating mechanism.","code":""},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate columns of datamatrix at specified thresholds — process_truncate_by_threshold","text":"","code":"process_truncate_by_threshold(   x,   truncate_lower = NA,   truncate_upper = NA,   only_numeric = TRUE )"},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate columns of datamatrix at specified thresholds — process_truncate_by_threshold","text":"x Matrix Data.frame. truncate_lower, truncate_upper Vectors truncation parameters, .e. lower upper tresholds truncation. Either single value replicated necessary dimension ncol(x). vector entry NA, corresponding column truncated. Truncation lower upper thresholds treated independently. named, names must correspond columnnames x, specified columns processed. See details. only_numeric TRUE x data.frame, columns type numeric processed. Otherwise columns processed (e.g. also case x matrix).","code":""},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate columns of datamatrix at specified thresholds — process_truncate_by_threshold","text":"Matrix data.frame dimensions input.","code":""},{"path":"https://matherealize.github.io/simdata/reference/process_truncate_by_threshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncate columns of datamatrix at specified thresholds — process_truncate_by_threshold","text":"Truncation defined setting values truncation threshold truncation threshold. Truncation parameters can specified three ways (note whenever only_numeric set TRUE, numeric columns affected): single numeric - columns processed way numeric vector without names - assumed length can replicated number columns x, column processed corresponding value vector numeric vector names - length can differ columns x columns names occur vector processed","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Design specification for simulating datasets — simdesign","title":"Design specification for simulating datasets — simdesign","text":"Stores information necessary simulate visualize datasets based underlying distribution Z.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design specification for simulating datasets — simdesign","text":"","code":"simdesign(   generator,   transform_initial = base::identity,   n_var_final = -1,   types_final = NULL,   names_final = NULL,   prefix_final = \"v\",   process_final = list(),   name = \"Simulation design\",   check_and_infer = TRUE,   ... )"},{"path":"https://matherealize.github.io/simdata/reference/simdesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design specification for simulating datasets — simdesign","text":"generator Function generates data underlying base distribution. assumed takes number simulated observations n_obs first argument, random generation functions stats extraDistr . Furthermore, expected return two-dimensional array output (matrix data.frame). Alternatively R object derived simdata::simdesign class. See details. transform_initial Function specifies transformation underlying dataset Z final dataset X. See details. n_var_final Integer, number columns final datamatrix X. Can inferred check_and_infer TRUE. types_final Optional vector length equal n_var_final (set user inferred) hence number columns final dataset X. Allowed entries \"logical\", \"factor\" \"numeric\". Stores type columns X. specified , inferred check_and_infer set TRUE. names_final NULL character vector variable names final dataset X. Length needs equal number columns X. Overrides naming options. See details. prefix_final NULL prefix attached variables final dataset X. Overriden names_final argument. Set NULL prefixes added. See details. process_final List lists specifying post-processing functions applied final datamatrix X returning . See do_processing. name Character, optional name simulation design. check_and_infer TRUE, simulation design tested simulating 5 observations using simulate_data. everything works without error, variables n_var_final types_final inferred results already set correctly user. ... arguments directly stored list object passed simulate_data.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design specification for simulating datasets — simdesign","text":"List object class attribute \"simdesign\" (S3 class) containing following entries (information given, entries directly saved user input): generator  name  transform_initial  n_var_final  types_final  names_final  process_final  entries information passed user","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Design specification for simulating datasets — simdesign","text":"simdesign class used following workflow: Specify design template used subsequent data generating / visualization steps. Sample / visualize datamatrix following template (possibly multiple times) using simulate_data. Use sampled datamatrix simulation study. details generators transformations, please see documentation simulate_data. details post-processing, please see documentation do_processing.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign.html","id":"naming-of-variables","dir":"Reference","previous_headings":"","what":"Naming of variables","title":"Design specification for simulating datasets — simdesign","text":"check_and_infer set TRUE, following procedure determines names variables: use names_final specified correct length otherwise, use names transform_initial present correct length otherwise, use prefix_final prefix variable number NULL otherwise, use names dataset generated generator function","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign.html","id":"simulation-templates","dir":"Reference","previous_headings":"","what":"Simulation Templates","title":"Design specification for simulating datasets — simdesign","text":"class intended used template simulation designs based specific underlying distributions. template needs define generator function construction pass function along arguments. See simdesign_mvtnorm example.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/simdesign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Design specification for simulating datasets — simdesign","text":"","code":"if (FALSE) { generator <- function(n) mvtnorm::rmvnorm(n, mean = 0) sim_design <- simdesign(generator) simulate_data(sim_design, 10) }"},{"path":"https://matherealize.github.io/simdata/reference/simdesign_discunif.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniform disc sampling design specification — simdesign_discunif","title":"Uniform disc sampling design specification — simdesign_discunif","text":"Provides 2-dimensional points, spread uniformly disc, partial disc segment (.e. circle, ring, ring segment). Useful e.g. building clustering exercises.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_discunif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniform disc sampling design specification — simdesign_discunif","text":"","code":"simdesign_discunif(   r_min = 0,   r_max = 1,   angle_min = 0,   angle_max = 2 * pi,   name = \"Uniform circle simulation design\",   ... )"},{"path":"https://matherealize.github.io/simdata/reference/simdesign_discunif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniform disc sampling design specification — simdesign_discunif","text":"r_min Minimum radius points. r_max Maximum radius points. angle_min Minimum angle points (0 2pi). angle_max Maximum angle points (0 2pi). name Character, optional name simulation design. ... arguments passed simdesign constructor.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_discunif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uniform disc sampling design specification — simdesign_discunif","text":"distribution points disk depends radius - farther , area points need cover. Thus, simply sampling two uniform values radius angle work. See references.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_discunif.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Uniform disc sampling design specification — simdesign_discunif","text":"https://mathworld.wolfram.com/DiskPointPicking.html","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_discunif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniform disc sampling design specification — simdesign_discunif","text":"","code":"if (FALSE) { disc_sampler <- simdesign_discunif() plot(simulate_data(disc_sampler, 1000))  ring_segment_sampler <- simdesign_discunif(r_min = 0.5, angle_min = 0.5 * pi) plot(simulate_data(ring_segment_sampler, 1000))  circle_sampler <- simdesign_discunif(r_min = 1) plot(simulate_data(circle_sampler, 1000)) }"},{"path":"https://matherealize.github.io/simdata/reference/simdesign_mvtnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate normal design specification — simdesign_mvtnorm","title":"Multivariate normal design specification — simdesign_mvtnorm","text":"Stores information necessary simulate visualize datasets based underlying distribution multivariate normal distribution Z.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_mvtnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate normal design specification — simdesign_mvtnorm","text":"","code":"simdesign_mvtnorm(   relations_initial,   mean_initial = 0,   sd_initial = 1,   is_correlation = TRUE,   method = \"svd\",   name = \"Multivariate-normal based simulation design\",   ... )"},{"path":"https://matherealize.github.io/simdata/reference/simdesign_mvtnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate normal design specification — simdesign_mvtnorm","text":"relations_initial Correlation / Covariance matrix initial multivariate Normal distribution Z. mean_initial Vector mean values initial multivariate Normal distribution Z. Dimension needs correspond dimension relations. sd_initial Vector standard deviations initial multivariate Normal distribution Z. Dimension needs correspond dimension relations. Overriden suqare root diagonal elements relations is_correlation FALSE. is_correlation TRUE, relations specifies correlation matrix (default, type specification usually natural specifying covariance matrix). Otherwise, relations specifies covariance matrix whose square root diagonal elements override sd_initial. method method argument mvtnorm::rmvnorm. name Character, optional name simulation design. ... arguments passed simdesign constructor.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_mvtnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate normal design specification — simdesign_mvtnorm","text":"List object class attribute \"simdesign_mvtnorm\" (S3 class), inheriting \"simdesign\". contains entries simdesign object addition following entries: mean_initial  sd_initial  cor_initial Initial correlation matrix multivariate normal distribution","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_mvtnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate normal design specification — simdesign_mvtnorm","text":"S3 class implements simulation design based underlying multivariate normal distribution creating generator function based mvtnorm::rmvnorm.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_mvtnorm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Multivariate normal design specification — simdesign_mvtnorm","text":"Note relations specifies correlation / covariance underlying Normal data Z thus directly translate correlations variables final datamatrix X.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_mvtnorm.html","id":"data-generation","dir":"Reference","previous_headings":"","what":"Data Generation","title":"Multivariate normal design specification — simdesign_mvtnorm","text":"Data generated simulate_data using following procedure: underlying data matrix Z sampled multivariate Normal distribution (number dimensions specified dimensions relations). Z transformed final dataset X applying transform_initial function Z. X post-processed specified.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/simdesign_norta.html","id":null,"dir":"Reference","previous_headings":"","what":"NORTA-based design specification — simdesign_norta","title":"NORTA-based design specification — simdesign_norta","text":"Stores information necessary simulate datasets based NORTA procedure (Cario Nelson 1997).","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_norta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NORTA-based design specification — simdesign_norta","text":"","code":"simdesign_norta(   cor_target_final = NULL,   cor_initial = NULL,   dist = list(),   tol_initial = 0.001,   n_obs_initial = 10000,   seed_initial = 1,   conv_norm_type = \"O\",   method = \"svd\",   name = \"NORTA based simulation design\",   ... )"},{"path":"https://matherealize.github.io/simdata/reference/simdesign_norta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NORTA-based design specification — simdesign_norta","text":"cor_target_final Target correlation matrix simulated datasets. least one cor_target_final cor_initial must specified. cor_initial Correlation matrix underlying multivariate standard normal distribution final data based .  least one cor_target_final cor_initial must specified. NULL, cor_initial numerically optimized simulation NORTA procedure using cor_target_final. dist List functions marginal distributions simulated variables. Must length specified correlation matrix (cor_target_final / cor_inital), order entries must correspond variables correlation matrix. See details specification marginal distributions. tol_initial cor_initial numerically optimized, specifies tolerance difference target correlation cor_target_final. Parameter passed optimize_cor_for_pair. n_obs_initial cor_initial numerically optimized, specifies number draws simulation optimization used estimate correlations. Parameter passed optimize_cor_for_pair. seed_initial Seed used draws initial distribution used optimization estimate correlations. conv_norm_type cor_initial numerically optimized found proper correlation matrix (.e. positive-definite), specifies metric used find nearest positive-definite correlation matrix. Parameter passed Matrix::nearPD (conv.norm.type), see details. method method argument mvtnorm::rmvnorm. name Character, optional name simulation design. ... arguments passed simdesign constructor.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_norta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NORTA-based design specification — simdesign_norta","text":"List object class attribute \"simdesign_norta\" (S3 class), inheriting \"simdesign\". contains entries simdesign object addition following entries: cor_target_final  cor_initial Initial correlation matrix multivariate normal distribution dist  tol_initial  n_obs_initial  conv_norm_type  method","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_norta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NORTA-based design specification — simdesign_norta","text":"S3 class implements simulation design based NORmal--Anything (NORTA) procedure Cario Nelson (1997). See corresponding NORTA vignette usage examples approximate real datasets.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_norta.html","id":"data-generation","dir":"Reference","previous_headings":"","what":"Data Generation","title":"NORTA-based design specification — simdesign_norta","text":"Data generated using following procedure: underlying data matrix Z sampled multivariate standard Normal distribution correlation structure given cor_initial. Z transformed dataset X applying functions given dist columns Z. resulting dataset X desired marginal distributions, approximate target correlation cor_target_final, specified. X transformed transformation transform_initial (note may affect correlation final dataset respected optimization procedure), post-processed specified.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_norta.html","id":"marginal-distributions","dir":"Reference","previous_headings":"","what":"Marginal distributions","title":"NORTA-based design specification — simdesign_norta","text":"list functions dist used define marginal distributions variables. entry must quantile function, .e. function maps [0, 1] domain probability distribution. entry must take single input vector, return single numeric vector. Examples acceptable entries include standard quantile functions implemented R (e.g. qnorm, qbinom, ...), user defined functions wrapping (e.g. function(x) = qnorm(x, mean = 10, sd = 4)), empirical quantile functions. See example NORTA vignette package.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_norta.html","id":"target-correlations","dir":"Reference","previous_headings":"","what":"Target correlations","title":"NORTA-based design specification — simdesign_norta","text":"every valid correlation matrix (.e. symmetric, positive-definite matrix elements [-1, 1] unity diagonal) number variables feasible given desired marginal distributions (see e.g. Ghosh Henderson 2003). Therefore, cor_target_final specified target correlation, class optimises cor_initial way, final simulated dataset correlation approximates cor_target_final. However, actual correlation end may differ cor_target_final infeasible given specification, NORTA procedure exactly reproduce target correlation. general, however, approximations acceptable target correlations marginal structures derived real datasets. See e.g. Ghosh Henderson 2003 motivation works.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simdesign_norta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"NORTA-based design specification — simdesign_norta","text":"Cario, M. C. Nelson, B. L. (1997) Modeling generating random vectors arbitrary marginal distributions correlation matrix. Technical Report, Department Industrial Engineering Management Sciences, Northwestern University, Evanston, Illinois. Ghosh, S. Henderson, S. G. (2003) Behavior NORTA method correlated random vector generation dimension increases. ACM Transactions Modeling Computer Simulation.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate design matrix — simulate_data","title":"Simulate design matrix — simulate_data","text":"Generate simulated dataset based transformation underlying base distribution.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate design matrix — simulate_data","text":"","code":"simulate_data(generator, ...)  # S3 method for default simulate_data(   generator = function(n) matrix(rnorm(n)),   n_obs = 1,   transform_initial = base::identity,   names_final = NULL,   prefix_final = NULL,   process_final = list(),   seed = NULL,   ... )  # S3 method for simdesign simulate_data(   generator,   n_obs = 1,   seed = NULL,   apply_transformation = TRUE,   apply_processing = TRUE,   ... )"},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate design matrix — simulate_data","text":"generator Function generates data underlying base distribution. assumed takes number simulated observations n_obs first argument, random generation functions stats extraDistr . Furthermore, expected return two-dimensional array output (matrix data.frame). Alternatively R object derived simdata::simdesign class. See details. ... arguments passed generator function. n_obs Number simulated observations. transform_initial Function specifies transformation underlying dataset Z final dataset X. See details. names_final NULL character vector variable names final dataset X. Length needs equal number columns X. Overrides naming options. See details. prefix_final NULL prefix attached variables final dataset X. Overriden names_final argument. Set NULL prefixes added. See details. process_final List lists specifying post-processing functions applied final datamatrix X returning . See do_processing. seed Set random seed ensure reproducibility results. apply_transformation argument can set FALSE override information stored passed simdesign object transform process data. Thus, raw data design generator returned. can useful debugging purposes. apply_processing argument can set FALSE override information stored passed simdesign object transform process data initial data transformed. can useful debugging purposes.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate design matrix — simulate_data","text":"Data.frame matrix n_obs rows simulated dataset X.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate design matrix — simulate_data","text":"Data generated using following procedure: underlying dataset Z sampled distribution. done call generator function. Z transformed final dataset X applying transform function Z. X post-processed specified (e.g. truncation avoid outliers).","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Simulate design matrix — simulate_data","text":"simulate_data(default): Function used simdesign S3 class used. simulate_data(simdesign): Function used simdesign S3 class.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulate design matrix — simulate_data","text":"function best used conjunction simdesign S3 class template based upon , facilitates data visualization conveniently stores information template simulation tasks.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"generators","dir":"Reference","previous_headings":"","what":"Generators","title":"Simulate design matrix — simulate_data","text":"generator function either passed directly, via simdata::simdesign object, assumed provide interface random generation functions R stats extraDistr packages. Specifically, means takes number observations first argument. arguments can set via passing named argument function. expected return two-dimensional array (matrix data.frame) number columns can determined. Otherwise check_and_infer step fail.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"transformations","dir":"Reference","previous_headings":"","what":"Transformations","title":"Simulate design matrix — simulate_data","text":"Transformations applicable output generator function (.e. take data.frame matrix input) output another data.frame matrix. convenience function function_list provided package specify transformations list functions, take whole datamatrix Z single argument can used apply specific transformations columns matrix. See documentation function_list details.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"post-processing","dir":"Reference","previous_headings":"","what":"Post-processing","title":"Simulate design matrix — simulate_data","text":"Post-processing datamatrix based do_processing.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"naming-of-variables","dir":"Reference","previous_headings":"","what":"Naming of variables","title":"Simulate design matrix — simulate_data","text":"Variables named names_final NULL correct length. Otherwise, prefix_final NULL, used prefix variable numbers. Otherwise, variables names remain returned generator function.","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/simulate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate design matrix — simulate_data","text":"","code":"if (FALSE) { generator <- function(n) mvtnorm::rmvnorm(n, mean = 0) simulate_data(generator, 10) }"},{"path":"https://matherealize.github.io/simdata/reference/simulate_data_conditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data which satisfies certain conditions — simulate_data_conditional","title":"Simulate data which satisfies certain conditions — simulate_data_conditional","text":"Generate simulated dataset based transformation underlying base distribution checking certain conditions met.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data_conditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data which satisfies certain conditions — simulate_data_conditional","text":"","code":"simulate_data_conditional(   generator,   n_obs = 1,   reject = function(x) TRUE,   reject_max_iter = 10,   on_reject = \"ignore\",   return_tries = FALSE,   seed = NULL,   ... )"},{"path":"https://matherealize.github.io/simdata/reference/simulate_data_conditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data which satisfies certain conditions — simulate_data_conditional","text":"generator Function generates data underlying base distribution. assumend takes number simulated observations n_obs first argument, random generation functions stats extraDistr . Furthermore, expected return two-dimensional array output (matrix data.frame). See details. n_obs Number simulated observations. reject Function takes matrix data.frame X single input outputs TRUE FALSE. Specifies simulated final datamatrix X rejected. Functions must output TRUE condition met / FALSE condition met matrix can accepted. Intended used function_list. See details. reject_max_iter Intger > 0. case rejection, many times new datamatrix simulated conditions reject met? on_reject \"stop\", error returned reject_max_iter times suitable datamatrix X found. \"current\", current datamatrix returned, regardless conditions reject. Otherwise, NULL returned. case warning reported. return_tries TRUE, function also outputs number tries necessary find dataset fulfilling condition. Useful record assess possible bias simulated datasets. See Value. seed Set random seed ensure reproducibility results. See Note . ... parameters passed simulate_data.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data_conditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data which satisfies certain conditions — simulate_data_conditional","text":"Data.frame matrix n_obs rows simulated dataset X conditions met within iteration limit. Otherwise NULL. return_tries TRUE, output list first entry data.frame matrix described , second entry (n_tries) giving numeric number tries necessary find returned dataset.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data_conditional.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate data which satisfies certain conditions — simulate_data_conditional","text":"details generating, transforming post-processing datasets, see simulate_data. function simulates data conditional certain requirements must met final datamatrix X. checking conducted output simulate_data (.e. also includes possible post-processing steps).","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data_conditional.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulate data which satisfies certain conditions — simulate_data_conditional","text":"Seeding random number generator tricky case. seed can passed simulate_data set calling , otherwise random number generation tries. means seed used call function might seed corresponding returned dataset.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data_conditional.html","id":"rejecting-datasets","dir":"Reference","previous_headings":"","what":"Rejecting Datasets","title":"Simulate data which satisfies certain conditions — simulate_data_conditional","text":"Examples restrictions include variance restrictions (e.g. constant columns happen due extreme transformations initial gaussian distribution Z), ensuring sufficient number observations given class (e.g. certain binary variables least x\\ multicollinearity (e.g. X must full column rank). reject evaluates FALSE, current datamatrix X rejected. case rejection, new datasets can simulated conditions met given maximum iteration limit hit (reject_max_iter), latest datamatrix returned error reported.","code":""},{"path":"https://matherealize.github.io/simdata/reference/simulate_data_conditional.html","id":"rejection-function","dir":"Reference","previous_headings":"","what":"Rejection Function","title":"Simulate data which satisfies certain conditions — simulate_data_conditional","text":"reject function take single input (data.frame matrix) output TRUE dataset rejected FALSE accepted. package provides function_list convenience function allows easily create rejection function assesses several conditions input dataset simply passing individual test functions function_list. test function templates found is_collinear contains_constant. See example .","code":""},{"path":[]},{"path":"https://matherealize.github.io/simdata/reference/simulate_data_conditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data which satisfies certain conditions — simulate_data_conditional","text":"","code":"if (FALSE) { dsgn <- simdesign_mvtnorm(diag(5)) simulate_data_conditional(dsgn, 100,     reject = function_list(is_collinear, contains_constant)) }"},{"path":"https://matherealize.github.io/simdata/news/index.html","id":"simdata-v0309003","dir":"Changelog","previous_headings":"","what":"simdata v0.3.0.9003","title":"simdata v0.3.0.9003","text":"Implemented partial functions.","code":""},{"path":"https://matherealize.github.io/simdata/news/index.html","id":"simdata-v0309002","dir":"Changelog","previous_headings":"","what":"simdata v0.3.0.9002","title":"simdata v0.3.0.9002","text":"Updating defaults functionality correlation network visualisation.","code":""},{"path":"https://matherealize.github.io/simdata/news/index.html","id":"simdata-v0309001","dir":"Changelog","previous_headings":"","what":"simdata v0.3.0.9001","title":"simdata v0.3.0.9001","text":"Added tolerance correlation matrix check.","code":""},{"path":"https://matherealize.github.io/simdata/news/index.html","id":"simdata-v0309000-build-date-2021-04-09","dir":"Changelog","previous_headings":"","what":"simdata v0.3.0.9000 (build date 2021-04-09)","title":"simdata v0.3.0.9000 (build date 2021-04-09)","text":"Added NORTA based simulation design associated functionality. Added vignettes explaining workflow, technical design package. Additions: simdesign_norta simulate data based NORTA design optimize_cor_mat facilitate NORTA simulation Vignette demonstrating NORTA workflow Vignette explaining technical implementation package Changes: Updated vignettes mvtnorm_simdesign -> simdesign_mvtnorm discunif_simdesign -> simdesign_discunif names_from_function_list -> get_names_from_function_list","code":""},{"path":"https://matherealize.github.io/simdata/news/index.html","id":"simdata-v0209003-build-date-2021-04-08","dir":"Changelog","previous_headings":"","what":"simdata v0.2.0.9003 (build date 2021-04-08)","title":"simdata v0.2.0.9003 (build date 2021-04-08)","text":"Changes: Post-processing pipeline: renamed process_data function do_process; renamed process_truncate process_truncate_by_iqr Additions: discunif_simdesign simulate circular data process_truncate_by_threshold function truncate fixed thresholds names_from_function_list obtain names functions function_list is_cor_matrix check matrix correlation matrix Fixes enhancements: robust error handling simdesign robust transparent naming variables Basic error checking essential functions robust handling function_lists","code":""},{"path":"https://matherealize.github.io/simdata/news/index.html","id":"simdata-v0209002-build-date-2020-05-14","dir":"Changelog","previous_headings":"","what":"simdata v0.2.0.9002 (build date 2020-05-14)","title":"simdata v0.2.0.9002 (build date 2020-05-14)","text":"Renamed package simdata. Fixes: Fixed cor_from_upper work single vectors","code":""},{"path":"https://matherealize.github.io/simdata/news/index.html","id":"simdata-v020-build-date-2019-11-26","dir":"Changelog","previous_headings":"","what":"simdata v0.2.0 (build date 2019-11-26)","title":"simdata v0.2.0 (build date 2019-11-26)","text":"Numerous fixes enhancements. worked previous versions package likely adapt code new interfaces implemented version. However, necessary changes minimal. Changes: Reworked simdesign class Reworked simulate_data simulate_data_conditional function Reworked network visualization Additions: Package Demo vignette demonstrate functionality","code":""},{"path":"https://matherealize.github.io/simdata/news/index.html","id":"simdata-v010-build-date-2019-11-14","dir":"Changelog","previous_headings":"","what":"simdata v0.1.0 (build date 2019-11-14)","title":"simdata v0.1.0 (build date 2019-11-14)","text":"Initial release (named simulatoR).","code":""}]
